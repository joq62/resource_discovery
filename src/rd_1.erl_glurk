%% Author: uabjle
%% Created: 10 dec 2012
%% Description: TODO: Add description to application_org
-module(rd_1).

%% --------------------------------------------------------------------
%% Include files
%% --------------------------------------------------------------------
-define(SERVER,resource_discovery_server).
%% --------------------------------------------------------------------
%% Internal exports
%% --------------------------------------------------------------------
-export([
	 add_target_resource_type/1,
	 add_local_resource/2,
	 fetch_resources/1,
	 trade_resources/0
	]).

%% --------------------------------------------------------------------
%% Macros
%% --------------------------------------------------------------------

%% --------------------------------------------------------------------
%% Records
%% --------------------------------------------------------------------

%% --------------------------------------------------------------------
%% API Functions
%% --------------------------------------------------------------------
%%-----------------------------------------------------------------------
%% @doc Store the target types for the local system. Store an "I Want"
%%      type. These are the types we wish to find among the node cluster.
%% @end
%%-----------------------------------------------------------------------
-spec store_target_resource_types([atom()]) -> no_return().
store_target_resource_types([H|_] = TargetTypes) when is_atom(H) ->
    gen_server:call(?SERVER, {store_target_resource_types, TargetTypes}).

add_target_resource_type(Type) ->
    gen_server:cast(?SERVER, {add_target_resource_type, Type}).

add_local_resource(Type, Resource) ->
    gen_server:cast(?SERVER, {add_local_resource, Type, Resource}).

fetch_resources(Type) ->
    gen_server:call(?SERVER, {fetch_resources, Type}).

trade_resources() ->
    gen_server:cast(?SERVER,{trade_resources}).

%% ====================================================================!
%% External functions
%% ====================================================================!


%% ====================================================================
%% Internal functions
%% ====================================================================
%%------------------------------------------------------------------------------
%% @doc Execute an rpc on a cached resource.  If the result of the rpc is {badrpc, reason} the 
%%      resource is deleted and the next resource is tried, else the result is 
%%      returned to the user.
%% <pre>
%% Varibles:
%%  Type - The resource type to get from resource discovery.
%% </pre>
%% @end
%%------------------------------------------------------------------------------
-spec rpc_call(resource_type(), atom(), atom(), [term()], timeout()) -> term() | {error, not_found}.
rpc_call(Type, Module, Function, Args, Timeout) ->
    case get_resource(Type) of
	{ok, Resource} -> 
	    error_logger:info_msg("got a resource ~p", [Resource]),
	    case rpc:call(Resource, Module, Function, Args, Timeout) of
		{badrpc, Reason} ->
		    error_logger:info_msg("got a badrpc ~p", [Reason]),
		    delete_resource_tuple({Type, Resource}),
		    rpc_call(Type, Module, Function, Args, Timeout);
		Reply ->
		    error_logger:info_msg("result of rpc was ~p", [Reply]),
		    Reply
	    end;
        {error, not_found} -> {error, not_found}
    end.

-spec rpc_call(resource_type(), atom(), atom(), [term()]) -> term() | {error, no_resources}.
rpc_call(Type, Module, Function, Args) ->
    rpc_call(Type, Module, Function, Args, 60000).

%%------------------------------------------------------------------------------
%% @doc Execute an rpc on a cached resource.  Any bad nodes are deleted. 
%%      resource is deleted and the next resource is tried, else the result is 
%%      returned to the user.
%% @end
%%------------------------------------------------------------------------------
-spec rpc_multicall(resource_type(), atom(), atom(), [term()], timeout()) -> {term(), [node()]} | {error, no_resources}.
rpc_multicall(Type, Module, Function, Args, Timeout) ->
    case get_resources(Type) of
        [] -> {error, no_resources};
	Resources -> 
	    error_logger:info_msg("got resources ~p", [Resources]),
	    {Resl, BadNodes} = rpc:multicall(Resources, Module, Function, Args, Timeout),
	    [delete_resource_tuple({Type, BadNode}) || BadNode <- BadNodes],
	    {Resl, BadNodes}
    end.

-spec rpc_multicall(resource_type(), atom(), atom(), [term()]) -> {term(), [node()]} | {error, no_resources}.
rpc_multicall(Type, Module, Function, Args) ->
    rpc_multicall(Type, Module, Function, Args, 60000).
